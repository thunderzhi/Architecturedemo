<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
                           http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd">


<!-- scanner jdbc properties  -->
    <context:property-placeholder location="classpath:db.properties" />
    <bean id="abstractXADataSource"
          class="com.atomikos.jdbc.AtomikosDataSourceBean"
          init-method="init" destroy-method="close" abstract="true">
        <property name="xaDataSourceClassName" value="com.alibaba.druid.pool.xa.DruidXADataSource"/>
        <property name="xaProperties">
            <props>
                <prop key="driverClassName">${mysql.jdbc.driverClassName}</prop>
                <prop key="initialSize">${mysql.jdbc.initialSize}</prop>
                <prop key="minIdle">3</prop>
                <prop key="maxActive">100</prop>
                <!-- 配置获取连接等待超时的时间 -->
                <prop key="maxWait">60000</prop>
                <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
                <prop key="timeBetweenEvictionRunsMillis">60000</prop>
                <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
                <prop key="minEvictableIdleTimeMillis">300000</prop>
                <prop key="validationQuery">SELECT 'x'</prop>
                <prop key="testWhileIdle">true</prop>
                <prop key="testOnBorrow">false</prop>
                <prop key="testOnReturn">false</prop>
                <!-- 配置监控统计拦截的filters -->
                <prop key="filters">stat</prop>
            </props>
        </property>
    </bean>

    <bean id="dataSource" parent="abstractXADataSource">
        <property name="uniqueResourceName">
            <value>dataSource</value>
        </property>
        <property name="xaProperties">
            <props>
                <prop key="url">${mysql.jdbc.url}</prop>
                <prop key="username">${mysql.jdbc.username}</prop>
                <prop key="password">${mysql.jdbc.password}</prop>
            </props>
        </property>
    </bean>
    <bean id="dataSource2" parent="abstractXADataSource">
        <property name="uniqueResourceName">
            <value>dataSource2</value>
        </property>
        <property name="xaProperties">
            <props>
                <prop key="url">${mysql.jdbc.url2}</prop>
                <prop key="username">${mysql.jdbc.username}</prop>
                <prop key="password">${mysql.jdbc.password}</prop>
            </props>
        </property>
    </bean>

    <!--配置 druid 数据源 关于更多的配置项 可以参考官方文档 <a href="https://github.com/alibaba/druid/wiki/DruidDataSource%E9%85%8D%E7%BD%AE%E5%B1%9E%E6%80%A7%E5%88%97%E8%A1%A8" > -->
<!--    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">-->
<!--        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
<!--        <property name="driverClassName"-->
<!--                  value="${mysql.jdbc.driverClassName}" />-->
<!--        <property name="url" value="${mysql.jdbc.url}"/>-->
<!--        <property name="username" value="${mysql.jdbc.username}"/>-->
<!--        <property name="password" value="${mysql.jdbc.password}"/>-->

<!--        &lt;!&ndash; 配置初始化大小、最小、最大连连接数量 &ndash;&gt;-->
<!--        <property name="initialSize" value="${mysql.jdbc.initialSize}"/>-->
<!--        &lt;!&ndash;        最小空闲连接数&ndash;&gt;-->
<!--        <property name="minIdle" value="${mysql.jdbc.minIdle}"/>-->
<!--        <property name="maxActive" value="${mysql.jdbc.maxActive}"/>-->

<!--        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
<!--        <property name="maxWait" value="60000"/>-->

<!--        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
<!--        <property name="timeBetweenEvictionRunsMillis" value="2000"/>-->

<!--        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
<!--        <property name="minEvictableIdleTimeMillis" value="600000"/>-->
<!--        &lt;!&ndash; 配置一个连接在池中最大生存的时间，单位是毫秒 &ndash;&gt;-->
<!--        <property name="maxEvictableIdleTimeMillis" value="900000"/>-->

<!--        &lt;!&ndash;validationQuery 用来检测连接是否有效的 sql，要求是一个查询语句，常用 select 'x'。-->
<!--            但是在 oracle 数据库下需要写成 select 'x' from dual 不然实例化数据源的时候就会失败,-->
<!--            这是由于 oracle 和 mysql 语法间的差异造成的&ndash;&gt;-->
<!--        <property name="validationQuery" value="select 'x'"/>-->
<!--        &lt;!&ndash;建议配置为 true，不影响性能，并且保证安全性。申请连接的时候检测，-->
<!--        如果空闲时间大于 timeBetweenEvictionRunsMillis，执行 validationQuery 检测连接是否有效。&ndash;&gt;-->
<!--        <property name="testWhileIdle" value="true"/>-->
<!--        &lt;!&ndash;申请连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能。&ndash;&gt;-->
<!--        <property name="testOnBorrow" value="false"/>-->
<!--        &lt;!&ndash;归还连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能。&ndash;&gt;-->
<!--        <property name="testOnReturn" value="false"/>-->

<!--        &lt;!&ndash;连接池中的 minIdle 数量以内的连接，空闲时间超过 minEvictableIdleTimeMillis，则会执行 keepAlive 操作。&ndash;&gt;-->
<!--        <property name="keepAlive" value="true"/>-->
<!--        <property name="phyMaxUseCount" value="100000"/>-->

<!--        &lt;!&ndash; 配置监控统计拦截的 filters Druid 连接池的监控信息主要是通过 StatFilter 采集的，-->
<!--        采集的信息非常全面，包括 SQL 执行、并发、慢查、执行时间区间分布等&ndash;&gt;-->
<!--        <property name="filters" value="stat"/>-->
<!--    </bean>-->


<!--    <bean id="dataSource2" class="com.alibaba.druid.pool.DruidDataSource"-->
<!--          init-method="init" destroy-method="close">-->
<!--        &lt;!&ndash; 基本属性 url、user、password &ndash;&gt;-->
<!--        <property name="driverClassName"-->
<!--                  value="${mysql.jdbc.driverClassName}" />-->
<!--        <property name="url" value="${mysql.jdbc.url2}"/>-->
<!--        <property name="username" value="${mysql.jdbc.username}"/>-->
<!--        <property name="password" value="${mysql.jdbc.password}"/>-->

<!--        &lt;!&ndash; 配置初始化大小、最小、最大连连接数量 &ndash;&gt;-->
<!--        <property name="initialSize" value="${mysql.jdbc.initialSize}"/>-->
<!--        &lt;!&ndash;        最小空闲连接数&ndash;&gt;-->
<!--        <property name="minIdle" value="${mysql.jdbc.minIdle}"/>-->
<!--        <property name="maxActive" value="${mysql.jdbc.maxActive}"/>-->

<!--        &lt;!&ndash; 配置获取连接等待超时的时间 &ndash;&gt;-->
<!--        <property name="maxWait" value="60000"/>-->

<!--        &lt;!&ndash; 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 &ndash;&gt;-->
<!--        <property name="timeBetweenEvictionRunsMillis" value="2000"/>-->

<!--        &lt;!&ndash; 配置一个连接在池中最小生存的时间，单位是毫秒 &ndash;&gt;-->
<!--        <property name="minEvictableIdleTimeMillis" value="600000"/>-->
<!--        &lt;!&ndash; 配置一个连接在池中最大生存的时间，单位是毫秒 &ndash;&gt;-->
<!--        <property name="maxEvictableIdleTimeMillis" value="900000"/>-->

<!--        &lt;!&ndash;validationQuery 用来检测连接是否有效的 sql，要求是一个查询语句，常用 select 'x'。-->
<!--            但是在 oracle 数据库下需要写成 select 'x' from dual 不然实例化数据源的时候就会失败,-->
<!--            这是由于 oracle 和 mysql 语法间的差异造成的&ndash;&gt;-->
<!--        <property name="validationQuery" value="select 'x'"/>-->
<!--        &lt;!&ndash;建议配置为 true，不影响性能，并且保证安全性。申请连接的时候检测，-->
<!--        如果空闲时间大于 timeBetweenEvictionRunsMillis，执行 validationQuery 检测连接是否有效。&ndash;&gt;-->
<!--        <property name="testWhileIdle" value="true"/>-->
<!--        &lt;!&ndash;申请连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能。&ndash;&gt;-->
<!--        <property name="testOnBorrow" value="false"/>-->
<!--        &lt;!&ndash;归还连接时执行 validationQuery 检测连接是否有效，做了这个配置会降低性能。&ndash;&gt;-->
<!--        <property name="testOnReturn" value="false"/>-->

<!--        &lt;!&ndash;连接池中的 minIdle 数量以内的连接，空闲时间超过 minEvictableIdleTimeMillis，则会执行 keepAlive 操作。&ndash;&gt;-->
<!--        <property name="keepAlive" value="true"/>-->
<!--        <property name="phyMaxUseCount" value="100000"/>-->

<!--        &lt;!&ndash; 配置监控统计拦截的 filters Druid 连接池的监控信息主要是通过 StatFilter 采集的，-->
<!--        采集的信息非常全面，包括 SQL 执行、并发、慢查、执行时间区间分布等&ndash;&gt;-->
<!--        <property name="filters" value="stat"/>-->
<!--    </bean>-->


    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
<!--        <property name="typeAliasesPackage" value="com.cxz.mapper.TestDB" />-->
        <!-- auto scan mapping xml files -->
        <property name="mapperLocations"
                  value="classpath:mapper/TestDB/*.xml" />
    </bean>

    <bean id="sqlSessionFactory2" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource2"/>
<!--        <property name="typeAliasesPackage" value="com.cxz.mapper.TestDB2" />-->

        <!-- auto scan mapping xml files -->
        <property name="mapperLocations"
                  value="classpath:mapper/TestDB2/*.xml" />
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cxz.mapper.TestDB" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cxz.mapper.TestDB2" />
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory2"/>
    </bean>
    <!--配置分布式事务-->
    <bean id="atomikosTransactionManager" class="com.atomikos.icatch.jta.UserTransactionManager" init-method="init" destroy-method="close">
        <property name="forceShutdown" value="false"/>
    </bean>
    <bean id="atomikosUserTransaction" class="com.atomikos.icatch.jta.UserTransactionImp">
        <property name="transactionTimeout" value="3000"/>
    </bean>
    <!--JTA事务管理器-->
    <bean id="jtaTransactionManager" class="org.springframework.transaction.jta.JtaTransactionManager">
        <property name="transactionManager">
            <ref bean="atomikosTransactionManager"/>
        </property>
        <property name="userTransaction">
            <ref bean="atomikosUserTransaction"/>
        </property>
        <property name="allowCustomIsolationLevels" value="true"/>
    </bean>
</beans>